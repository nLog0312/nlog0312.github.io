var audio = document.getElementById('audioPlayer');
var button = document.getElementById('toggleButton');

window.addEventListener("load", () => {
    if (localStorage.getItem("isPlaying") === "true") {
        audio.play().catch(error => {
            console.log("Tr√¨nh duy·ªát ch·∫∑n autoplay, c·∫ßn t∆∞∆°ng t√°c ng∆∞·ªùi d√πng!");
            button.innerHTML = '<i class="fa-solid fa-play"></i>';
        });
    }
});

button.addEventListener('click', function() {
    if (audio.paused) {
        audio.play();
        button.innerHTML = '<i class="fa-solid fa-pause"></i>';
        localStorage.setItem("isPlaying", "true");
    } else {
        audio.pause();
        button.innerHTML = '<i class="fa-solid fa-play"></i>';
        localStorage.setItem("isPlaying", "false");
    }
});

window.addEventListener("beforeunload", () => {
    localStorage.setItem("isPlaying", !audio.paused);
});

// ------------------------------------- Lyrics -------------------------------------
const lyricsDisplay = document.getElementById('lyricsDisplay');

// Danh s√°ch lyrics v·ªõi th·ªùi gian t∆∞∆°ng ·ª©ng
const lyrics = [
    { time: 0, text: "~~~üé∂~~~" },
    { time: 16, text: "Ng√†y em ƒë·∫øn" },
    { time: 19, text: "M·ªôt ch√∫t y√™u th∆∞∆°ng nh·ªè nhoi" },
    { time: 23.5, text: "M·ªôt ch√∫t c√¥ ƒë∆°n ƒëang l·ªõn l√™n d·∫ßn" },
    { time: 28, text: "Ch√¨m v√†o nh·ªØng ng√†y ng·∫©n ng∆°" },
    
    { time: 33.5, text: "Ng√†y em ƒë·∫øn" },
    { time: 36.5, text: "T·ª´ng ph√∫t trong anh l√† em" },
    { time: 41, text: "T·ª´ng ch√∫t y√™u th∆∞∆°ng, ng√†y ·∫•y b√¢y gi·ªù" },
    { time: 45, text: "Th√†nh m·ªôt b·∫ßu tr·ªùi trong m∆°" },
    
    { time: 51, text: "T·ª´ khi √°nh m·∫Øt c·ªßa ng√†y ·∫•y, lu√¥n l∆∞·ª£n l·ªù trong ƒë√™m" },
    { time: 56, text: "Ch·ª£t nghƒ© ƒë·∫øn bao nhi√™u m·ªông ∆∞·ªõc, ·ªü sau n√†y" },
    { time: 60, text: "ƒê∆∞·ª£c n·∫Øm ƒë√¥i b√†n tay, √¥m l·∫•y ƒë√¥i b·ªù vai" },
    { time: 65, text: "Nh√¨n ng·∫Øm em ng√†y mai~~~" },
    
    { time: 69, text: "L√† khi √°nh m·∫Øt c·ªßa ng√†y ·∫•y, lu√¥n l∆∞·ª£n l·ªù trong ƒë√™m" },
    { time: 73, text: "Ch·ª£t nghƒ© ƒë·∫øn bao nhi√™u m·ªông ∆∞·ªõc, ·ªü sau n√†y" },
    { time: 78, text: "ƒê∆∞·ª£c n·∫Øm ƒë√¥i b√†n tay, √¥m l·∫•y ƒë√¥i b·ªù vai" },
    { time: 82.5, text: "Nh√¨n ng·∫Øm em ng√†y mai~~~" },
    
    { time: 86, text: "V·∫´n t∆∞∆°ng t∆∞ m·ªôt ng∆∞·ªùi" },
    { time: 87.5, text: "Nh√¨n em, d·∫´u ph√≠a xa ch√¢n tr·ªùi" },
    { time: 91, text: "M√πa xu√¢n v·ªën kh√¥ng ch·ªù ƒë·ª£i" },
    { time: 93, text: "M·ªôt th·∫±ng m·ªông m∆°" },
    
    { time: 94.5, text: "Hay ch·ªâ l√† ƒë√¥i ch√∫t th·∫ßn t∆∞·ª£ng" },
    { time: 98, text: "V√¨ tr√°i tim ƒëang c∆∞·ªùi" },
    { time: 99, text: "D√π l√† em b√¨nh y√™n v·ªõi ai" },
    { time: 101, text: "T√¨nh y√™u n√†y li·ªáu c√≥ sai" },
    
    { time: 105, text: "Anh √¥m l·∫•y bao nhi√™u ch·ªù mong" },
    { time: 108, text: "Nhi·ªÅu ƒë·∫øn m·ª©c anh hi v·ªçng" },
    { time: 110, text: "M·ªói bu·ªïi s√°ng s·∫Ω ƒë∆∞·ª£c ƒë·ªÉ t√¢m" },
    { time: 112, text: "Ng∆∞·ªùi ·ªü ph√≠a sau em n√†y" },
    { time: 114, text: "Nh∆∞ng b√™n em n√†o l·∫°i c√≥ hay" },
    { time: 116, text: "V√¨ m·ªôt ng∆∞·ªùi ch·∫≥ng c√≤n c√≥ ai~~~" },
    
    { time: 120, text: "~~~üé∂~~~" },
    
    { time: 177.5, text: "T·ª´ khi √°nh m·∫Øt c·ªßa ng√†y ·∫•y, lu√¥n l∆∞·ª£n l·ªù trong ƒë√™m" },
    { time: 182.7, text: "Ch·ª£t nghƒ© ƒë·∫øn bao nhi√™u m·ªông ∆∞·ªõc, ·ªü sau n√†y" },
    { time: 186, text: "ƒê∆∞·ª£c n·∫Øm ƒë√¥i b√†n tay, √¥m l·∫•y ƒë√¥i b·ªù vai" },
    { time: 191.5, text: "Nh√¨n ng·∫Øm em ng√†y mai~~~" },
    
    { time: 195, text: "T·ª´ khi √°nh m·∫Øt c·ªßa ng√†y ·∫•y, lu√¥n l∆∞·ª£n l·ªù trong ƒë√™m" },
    { time: 200, text: "Ch·ª£t nghƒ© ƒë·∫øn bao nhi√™u m·ªông ∆∞·ªõc, ·ªü sau n√†y" },
    { time: 204, text: "ƒê∆∞·ª£c n·∫Øm ƒë√¥i b√†n tay, √¥m l·∫•y ƒë√¥i b·ªù vai" },
    { time: 209.5, text: "Nh√¨n ng·∫Øm em ng√†y mai~~~" },
    
    { time: 215, text: "~~~üé∂~~~" },
];

let currentIndex = -1;

audio.addEventListener('timeupdate', () => {
    let currentTime = audio.currentTime;
    
    if (currentIndex + 1 < lyrics.length && currentTime >= lyrics[currentIndex + 1].time) {
        currentIndex++;

        lyricsDisplay.classList.remove('active');
        setTimeout(() => {
            lyricsDisplay.textContent = lyrics[currentIndex].text;
            lyricsDisplay.classList.add('active');
        }, 200);
    }
});